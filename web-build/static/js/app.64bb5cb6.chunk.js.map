{"version":3,"sources":["src/components/Card.jsx","src/context/doc.js","src/pages/Vocabulary.jsx","App.js"],"names":["Card","word","newWord","useState","reveal","setReveal","hint","setHint","outOfHints","french","length","minWidth","rounded","py","px","mb","shadow","_dark","borderColor","backgroundColor","_web","borderWidth","_light","minH","display","justifyContent","fontSize","fontWeight","capitalize","english","map","char","i","join","onPress","minW","isDisabled","colorScheme","mr","color","DocContext","React","createContext","DocProvider","children","vocabulary","setVocabulary","useEffect","a","async","get","then","data","Provider","value","Vocabulary","pickedWord","setPickedWord","context","useContext","Error","useDoc","pickRandomWord","Math","floor","random","styles","App","bgColor","p","pt","style","flex","background","pl","container","StyleSheet","create","alignItems","position","borderRadius","top","left","right","bottom"],"mappings":"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","file":"static/js/app.64bb5cb6.chunk.js","sourcesContent":["import { Box, Button, Center, HStack, Text, VStack } from 'native-base';\nimport React, { useState } from 'react';\nimport { capitalize } from 'lodash';\n\nconst Card = ({ word, newWord }) => {\n  const [reveal, setReveal] = useState(false);\n  const [hint, setHint] = useState(-1);\n  if (!word) return null;\n  const outOfHints = hint >= word.french.length || 0;\n  const onReveal = () => {\n    if (!reveal) {\n      setReveal(true);\n    } else {\n      setReveal(false);\n      setHint(-1);\n      newWord();\n    }\n  };\n  const onHint = () => {\n    if (!outOfHints) setHint(hint + 1);\n  };\n\n  const answerText = () => {\n    if (reveal) {\n      return capitalize(word.french);\n    } else if (hint > -1) {\n      return capitalize(\n        [...word.french]\n          .map((char, i) => {\n            if (i < hint) {\n              return char;\n            } else {\n              switch (char) {\n                case ' ':\n                  return ' .';\n                case '/':\n                  return ' /';\n                case \"'\":\n                  return char;\n                default:\n                  return ' _';\n              }\n            }\n          })\n          .join('')\n      );\n    }\n    return '?';\n  };\n  return (\n    <VStack>\n      <Box\n        minWidth=\"full\"\n        rounded=\"lg\"\n        py=\"12\"\n        px=\"3\"\n        mb=\"10\"\n        shadow=\"1\"\n        _dark={{\n          borderColor: 'coolGray.600',\n          backgroundColor: 'gray.700',\n        }}\n        _web={{\n          shadow: 2,\n          borderWidth: 0,\n        }}\n        _light={{\n          backgroundColor: 'white',\n        }}\n      >\n        <Center>\n          <Box minH={20} display=\"flex\" justifyContent=\"center\" mb={7}>\n            <Text fontSize=\"3xl\" fontWeight=\"bold\">\n              {capitalize(word.english)}\n            </Text>\n          </Box>\n\n          <Box minH={20} display=\"flex\" justifyContent=\"center\">\n            <Text fontSize=\"3xl\">{answerText()}</Text>\n          </Box>\n        </Center>\n      </Box>\n\n      <Box>\n        <HStack justifyContent=\"space-around\">\n          <Button\n            onPress={onHint}\n            minW=\"24\"\n            py=\"4\"\n            rounded=\"lg\"\n            isDisabled={outOfHints || reveal}\n            colorScheme=\"darkBlue\"\n            _web={{ mr: 4 }}\n          >\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color=\"white\">\n              Hint\n            </Text>\n          </Button>\n\n          <Button\n            onPress={onReveal}\n            minW=\"24\"\n            rounded=\"lg\"\n            colorScheme={!reveal ? 'amber' : 'success'}\n          >\n            <Text fontSize=\"lg\" fontWeight=\"bold\" color=\"white\">\n              {reveal ? 'Next' : 'Answer'}\n            </Text>\n          </Button>\n        </HStack>\n      </Box>\n    </VStack>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext, useEffect } from 'react';\nimport { get } from 'axios';\n\nexport const DocContext = React.createContext({});\n\nexport const useDoc = () => {\n  const context = useContext(DocContext);\n  if (context === null) {\n    throw new Error('useDoc must be used within a DocProvider');\n  }\n  return context;\n};\n\nexport const DocProvider = ({ children }) => {\n  const [vocabulary, setVocabulary] = useState(null);\n  useEffect(() => {\n    async function fetchMyAPI() {\n      get('http://hannah-in-france-project.herokuapp.com/vocabulary').then(\n        ({ data }) => setVocabulary(data)\n      );\n    }\n\n    fetchMyAPI();\n  }, []);\n\n  return (\n    <DocContext.Provider value={{ vocabulary }}>{children}</DocContext.Provider>\n  );\n};\n\nexport default DocContext;\n","import { Box, View } from 'native-base';\nimport React, { useEffect, useState } from 'react';\nimport Card from '../components/Card';\nimport { useDoc } from '../context/doc';\n\nconst Vocabulary = () => {\n  const [pickedWord, setPickedWord] = useState(null);\n\n  const { vocabulary } = useDoc();\n  const pickRandomWord = () =>\n    setPickedWord(vocabulary[Math.floor(Math.random() * vocabulary.length)]);\n\n  useEffect(() => {\n    if (vocabulary) pickRandomWord();\n  }, [vocabulary]);\n\n  if (!vocabulary || !pickedWord) return null;\n\n  return <Card newWord={pickRandomWord} word={pickedWord}></Card>;\n};\n\nexport default Vocabulary;\n","import React from 'react';\nimport { StyleSheet } from 'react-native';\nimport Vocabulary from './src/pages/Vocabulary';\nimport { DocProvider } from './src/context/doc';\nimport { Box, NativeBaseProvider, Text, View } from 'native-base';\n\nconst App = () => {\n  return (\n    <DocProvider>\n      <NativeBaseProvider>\n        <View bgColor=\"lightBlue.50\" p={10} pt={24} style={{ flex: 1 }}>\n          <Box\n            style={styles.background}\n            bgColor=\"blue.700\"\n            minW=\"full\"\n            minH=\"1/2\"\n          ></Box>\n          <View mb=\"24\" _web={{ mb: 4 }}>\n            <Text fontSize=\"4xl\" color=\"white\" fontWeight=\"bold\">\n              Vocabulary Test\n            </Text>\n            <Text pl={4} fontSize=\"md\" color=\"white\" fontWeight=\"bold\">\n              You can do it ❤️\n            </Text>\n          </View>\n          <View style={styles.container}>\n            <Vocabulary></Vocabulary>\n          </View>\n        </View>\n      </NativeBaseProvider>\n    </DocProvider>\n  );\n};\nexport default App;\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'relative',\n  },\n  background: {\n    borderRadius: 20,\n    position: 'absolute',\n    top: '-50%',\n    left: 0,\n    right: 0,\n    bottom: '70%',\n  },\n});\n"],"sourceRoot":""}